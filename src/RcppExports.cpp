// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// inverse_arma
arma::mat inverse_arma(arma::mat m);
RcppExport SEXP _fastgpbart_inverse_arma(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_arma(m));
    return rcpp_result_gen;
END_RCPP
}
// initialize_test
int initialize_test(Eigen::MatrixXd x_train, Eigen::MatrixXd x_test, Eigen::VectorXd residuals, double phi, double nu, double tau, double tau_mu, int node_min_size);
RcppExport SEXP _fastgpbart_initialize_test(SEXP x_trainSEXP, SEXP x_testSEXP, SEXP residualsSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP tau_muSEXP, SEXP node_min_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_test(x_train, x_test, residuals, phi, nu, tau, tau_mu, node_min_size));
    return rcpp_result_gen;
END_RCPP
}
// dhcauchy
double dhcauchy(double x, double location, double sigma);
RcppExport SEXP _fastgpbart_dhcauchy(SEXP xSEXP, SEXP locationSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dhcauchy(x, location, sigma));
    return rcpp_result_gen;
END_RCPP
}
// bart
List bart(Eigen::MatrixXd x_train, Eigen::VectorXd y, Eigen::MatrixXd x_test, int n_tree, int n_mcmc, int n_burn, int n_min_size, double tau, double mu, double tau_mu, double naive_sigma, double alpha, double beta);
RcppExport SEXP _fastgpbart_bart(SEXP x_trainSEXP, SEXP ySEXP, SEXP x_testSEXP, SEXP n_treeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP n_min_sizeSEXP, SEXP tauSEXP, SEXP muSEXP, SEXP tau_muSEXP, SEXP naive_sigmaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< int >::type n_min_size(n_min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    Rcpp::traits::input_parameter< double >::type naive_sigma(naive_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bart(x_train, y, x_test, n_tree, n_mcmc, n_burn, n_min_size, tau, mu, tau_mu, naive_sigma, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// omega
Eigen::MatrixXd omega(const Eigen::MatrixXd x_train, const double phi, const double nu);
RcppExport SEXP _fastgpbart_omega(SEXP x_trainSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(omega(x_train, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// omega_plus_tau
Eigen::MatrixXd omega_plus_tau(const Eigen::MatrixXd x_train, const double phi, const double nu, const double tau);
RcppExport SEXP _fastgpbart_omega_plus_tau(SEXP x_trainSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(omega_plus_tau(x_train, phi, nu, tau));
    return rcpp_result_gen;
END_RCPP
}
// distance_matrix
Eigen::MatrixXd distance_matrix(const Eigen::MatrixXd x_train, const Eigen::MatrixXd x_test);
RcppExport SEXP _fastgpbart_distance_matrix(SEXP x_trainSEXP, SEXP x_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x_test(x_testSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_matrix(x_train, x_test));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastgpbart_inverse_arma", (DL_FUNC) &_fastgpbart_inverse_arma, 1},
    {"_fastgpbart_initialize_test", (DL_FUNC) &_fastgpbart_initialize_test, 8},
    {"_fastgpbart_dhcauchy", (DL_FUNC) &_fastgpbart_dhcauchy, 3},
    {"_fastgpbart_bart", (DL_FUNC) &_fastgpbart_bart, 13},
    {"_fastgpbart_omega", (DL_FUNC) &_fastgpbart_omega, 3},
    {"_fastgpbart_omega_plus_tau", (DL_FUNC) &_fastgpbart_omega_plus_tau, 4},
    {"_fastgpbart_distance_matrix", (DL_FUNC) &_fastgpbart_distance_matrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastgpbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
